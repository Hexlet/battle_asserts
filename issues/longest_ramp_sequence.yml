level: hard
tags: [numbers]
description: Find longest ramp secuence in vector. Ramp sequence is a sequence of numbers which apply such condition a1 < a2 > a3 < … > an-1 < an or a1 > a2 < a3 > … < an-1 > an
author: {github_nickname: alexander37137}
checks:
  ruby: |-
    assert_equal(0, find_longest_ramp_sequence([]))
    assert_equal(1, find_longest_ramp_sequence([1]))
    assert_equal(1, find_longest_ramp_sequence([5, 5, 5]))
    assert_equal(2, find_longest_ramp_sequence([1, 2, 3]))
    assert_equal(6, find_longest_ramp_sequence([1, 2, 1, 3, -2, 5]))
    assert_equal(3, find_longest_ramp_sequence([1, 2, 3, 3, 1, -4, -6, 0, 1, -1]))
    assert_equal(4, find_longest_ramp_sequence([1, 3, 5, 5, 4, 2, 0, 1, -1]))
  javascript: |-
    assertEqual(0, findLongestRampSequence([]));
    assertEqual(1, findLongestRampSequence([1]));
    assertEqual(1, findLongestRampSequence([5, 5, 5]));
    assertEqual(2, findLongestRampSequence([1, 2, 3]));
    assertEqual(6, findLongestRampSequence([1, 2, 1, 3, -2, 5]));
    assertEqual(3, findLongestRampSequence([1, 2, 3, 3, 1, -4, -6, 0, 1, -1]));
    assertEqual(4, findLongestRampSequence([1, 3, 5, 5, 4, 2, 0, 1, -1]));
  python: |-
    assert_equal(0, find_longest_ramp_sequence([]))
    assert_equal(1, find_longest_ramp_sequence([1]))
    assert_equal(1, find_longest_ramp_sequence([5, 5, 5]))
    assert_equal(2, find_longest_ramp_sequence([1, 2, 3]))
    assert_equal(6, find_longest_ramp_sequence([1, 2, 1, 3, -2, 5]))
    assert_equal(3, find_longest_ramp_sequence([1, 2, 3, 3, 1, -4, -6, 0, 1, -1]))
    assert_equal(4, find_longest_ramp_sequence([1, 3, 5, 5, 4, 2, 0, 1, -1]))
  php: |-
    assertEqual(0, findLongestRampSequence(array()));
    assertEqual(1, findLongestRampSequence(array(1)));
    assertEqual(1, findLongestRampSequence(array(5, 5, 5)));
    assertEqual(2, findLongestRampSequence(array(1, 2, 3)));
    assertEqual(6, findLongestRampSequence(array(1, 2, 1, 3, -2, 5)));
    assertEqual(3, findLongestRampSequence(array(1, 2, 3, 3, 1, -4, -6, 0, 1, -1)));
    assertEqual(4, findLongestRampSequence(array(1, 3, 5, 5, 4, 2, 0, 1, -1)));
